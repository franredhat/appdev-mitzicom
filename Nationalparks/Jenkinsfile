// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/frodrigu-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    def GUID = "frodrigu"
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"
    git 'https://github.com/franredhat/appdev-mitzicom.git'
    echo "Packaging Nationalparks"
    sh "cd Nationalparks"
    sh "mvn -s ../nexus_settings.xml clean package -DskipTests=true"
    echo "Nationalparks unit tests"
    sh "mvn -s ../nexus_settings.xml test"
    
    echo "Running Nationalparks Code Analyses"
    sh "mvn -s ../nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus-$GUID-nexus.apps.na39.openshift.opentlc.com/repository/releases"

    echo "Building container image Nationalparks:0.0-0"
    sh "oc start-build Nationalparks --follow --from-file=./target/${project.artifactId} -n ${GUID}-parks-dev"
    openshiftTag alias: 'false', destStream: 'Nationalparks', destTag: 0.0-0, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: 'Nationalparks', srcTag: 'latest', verbose: 'false'

    echo "Publishing Nationalparks to Nexus"
    sh "mvn -s ../nexus_settings.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus-${GUID}-nexus.apps.na39.openshift.opentlc.com/repository/releases"

    echo "Deploying container image to Development Project"
    sh "oc set image dc/nationalparks nationalparks=docker-registry.default.svc:5000/${GUID}-parks-dev/nationalparks:0.0-0 -n ${GUID}-parks-dev"
    openshiftDeploy depCfg: 'nationalparks', namespace: "${GUID}-parks-dev", verbose: 'false', waitTime: '', waitUnit: 'sec'

    echo "Running integration tests"
    curl "http://nationalparks-${GUID}-parks-dev.apps.na39.openshift.opentlc.com/ws/data/load/" 
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
